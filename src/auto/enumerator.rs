// This file was generated by gir (https://github.com/gtk-rs/gir @ c530bb9)
// from gir-files (https://github.com/gtk-rs/gir-files @ 25c8aaf)
// DO NOT EDIT

use Client;
use Device;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Enumerator(Object<ffi::GUdevEnumerator, ffi::GUdevEnumeratorClass>);

    match fn {
        get_type => || ffi::g_udev_enumerator_get_type(),
    }
}

impl Enumerator {
    pub fn new(client: &Client) -> Enumerator {
        unsafe {
            from_glib_full(ffi::g_udev_enumerator_new(client.to_glib_none().0))
        }
    }
}

pub trait EnumeratorExt {
    fn add_match_is_initialized(&self) -> Option<Enumerator>;

    fn add_match_name(&self, name: &str) -> Option<Enumerator>;

    fn add_match_property(&self, name: &str, value: &str) -> Option<Enumerator>;

    fn add_match_subsystem(&self, subsystem: &str) -> Option<Enumerator>;

    fn add_match_sysfs_attr(&self, name: &str, value: &str) -> Option<Enumerator>;

    fn add_match_tag(&self, tag: &str) -> Option<Enumerator>;

    fn add_nomatch_subsystem(&self, subsystem: &str) -> Option<Enumerator>;

    fn add_nomatch_sysfs_attr(&self, name: &str, value: &str) -> Option<Enumerator>;

    fn add_sysfs_path(&self, sysfs_path: &str) -> Option<Enumerator>;

    fn execute(&self) -> Vec<Device>;

    fn get_property_client(&self) -> Option<Client>;

    fn connect_property_client_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Enumerator> + IsA<glib::object::Object>> EnumeratorExt for O {
    fn add_match_is_initialized(&self) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_match_is_initialized(self.to_glib_none().0))
        }
    }

    fn add_match_name(&self, name: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_match_name(self.to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn add_match_property(&self, name: &str, value: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_match_property(self.to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0))
        }
    }

    fn add_match_subsystem(&self, subsystem: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_match_subsystem(self.to_glib_none().0, subsystem.to_glib_none().0))
        }
    }

    fn add_match_sysfs_attr(&self, name: &str, value: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_match_sysfs_attr(self.to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0))
        }
    }

    fn add_match_tag(&self, tag: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_match_tag(self.to_glib_none().0, tag.to_glib_none().0))
        }
    }

    fn add_nomatch_subsystem(&self, subsystem: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_nomatch_subsystem(self.to_glib_none().0, subsystem.to_glib_none().0))
        }
    }

    fn add_nomatch_sysfs_attr(&self, name: &str, value: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_nomatch_sysfs_attr(self.to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0))
        }
    }

    fn add_sysfs_path(&self, sysfs_path: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_sysfs_path(self.to_glib_none().0, sysfs_path.to_glib_none().0))
        }
    }

    fn execute(&self) -> Vec<Device> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::g_udev_enumerator_execute(self.to_glib_none().0))
        }
    }

    fn get_property_client(&self) -> Option<Client> {
        unsafe {
            let mut value = Value::from_type(<Client as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "client".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn connect_property_client_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::client",
                transmute(notify_client_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_client_trampoline<P>(this: *mut ffi::GUdevEnumerator, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Enumerator> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Enumerator::from_glib_borrow(this).downcast_unchecked())
}
