// This file was generated by gir (https://github.com/gtk-rs/gir @ 2723216)
// from gir-files (https://github.com/gtk-rs/gir-files @ 25c8aaf)
// DO NOT EDIT

use Client;
use Device;
use ffi;
use glib::StaticType;
use glib::Value;
use glib::object::IsA;
use glib::translate::*;
use gobject_ffi;
use std::fmt;

glib_wrapper! {
    pub struct Enumerator(Object<ffi::GUdevEnumerator, ffi::GUdevEnumeratorClass, EnumeratorClass>);

    match fn {
        get_type => || ffi::g_udev_enumerator_get_type(),
    }
}

impl Enumerator {
    pub fn new<P: IsA<Client>>(client: &P) -> Enumerator {
        unsafe {
            from_glib_full(ffi::g_udev_enumerator_new(client.as_ref().to_glib_none().0))
        }
    }
}

pub const NONE_ENUMERATOR: Option<&Enumerator> = None;

pub trait EnumeratorExt: 'static {
    fn add_match_is_initialized(&self) -> Option<Enumerator>;

    fn add_match_name(&self, name: &str) -> Option<Enumerator>;

    fn add_match_property(&self, name: &str, value: &str) -> Option<Enumerator>;

    fn add_match_subsystem(&self, subsystem: &str) -> Option<Enumerator>;

    fn add_match_sysfs_attr(&self, name: &str, value: &str) -> Option<Enumerator>;

    fn add_match_tag(&self, tag: &str) -> Option<Enumerator>;

    fn add_nomatch_subsystem(&self, subsystem: &str) -> Option<Enumerator>;

    fn add_nomatch_sysfs_attr(&self, name: &str, value: &str) -> Option<Enumerator>;

    fn add_sysfs_path(&self, sysfs_path: &str) -> Option<Enumerator>;

    fn execute(&self) -> Vec<Device>;

    fn get_property_client(&self) -> Option<Client>;
}

impl<O: IsA<Enumerator>> EnumeratorExt for O {
    fn add_match_is_initialized(&self) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_match_is_initialized(self.as_ref().to_glib_none().0))
        }
    }

    fn add_match_name(&self, name: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_match_name(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn add_match_property(&self, name: &str, value: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_match_property(self.as_ref().to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0))
        }
    }

    fn add_match_subsystem(&self, subsystem: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_match_subsystem(self.as_ref().to_glib_none().0, subsystem.to_glib_none().0))
        }
    }

    fn add_match_sysfs_attr(&self, name: &str, value: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_match_sysfs_attr(self.as_ref().to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0))
        }
    }

    fn add_match_tag(&self, tag: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_match_tag(self.as_ref().to_glib_none().0, tag.to_glib_none().0))
        }
    }

    fn add_nomatch_subsystem(&self, subsystem: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_nomatch_subsystem(self.as_ref().to_glib_none().0, subsystem.to_glib_none().0))
        }
    }

    fn add_nomatch_sysfs_attr(&self, name: &str, value: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_nomatch_sysfs_attr(self.as_ref().to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0))
        }
    }

    fn add_sysfs_path(&self, sysfs_path: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_sysfs_path(self.as_ref().to_glib_none().0, sysfs_path.to_glib_none().0))
        }
    }

    fn execute(&self) -> Vec<Device> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::g_udev_enumerator_execute(self.as_ref().to_glib_none().0))
        }
    }

    fn get_property_client(&self) -> Option<Client> {
        unsafe {
            let mut value = Value::from_type(<Client as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"client\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get()
        }
    }
}

impl fmt::Display for Enumerator {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Enumerator")
    }
}
