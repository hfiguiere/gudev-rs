// This file was generated by gir (0d368d6) from gir-files (25c8aaf)
// DO NOT EDIT

use Client;
use Device;
use ffi;
use glib::translate::*;

glib_wrapper! {
    pub struct Enumerator(Object<ffi::GUdevEnumerator>);

    match fn {
        get_type => || ffi::g_udev_enumerator_get_type(),
    }
}

impl Enumerator {
    pub fn new(client: &Client) -> Enumerator {
        unsafe {
            from_glib_full(ffi::g_udev_enumerator_new(client.to_glib_none().0))
        }
    }

    pub fn add_match_is_initialized(&self) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_match_is_initialized(self.to_glib_none().0))
        }
    }

    pub fn add_match_name(&self, name: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_match_name(self.to_glib_none().0, name.to_glib_none().0))
        }
    }

    pub fn add_match_property(&self, name: &str, value: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_match_property(self.to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0))
        }
    }

    pub fn add_match_subsystem(&self, subsystem: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_match_subsystem(self.to_glib_none().0, subsystem.to_glib_none().0))
        }
    }

    pub fn add_match_sysfs_attr(&self, name: &str, value: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_match_sysfs_attr(self.to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0))
        }
    }

    pub fn add_match_tag(&self, tag: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_match_tag(self.to_glib_none().0, tag.to_glib_none().0))
        }
    }

    pub fn add_nomatch_subsystem(&self, subsystem: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_nomatch_subsystem(self.to_glib_none().0, subsystem.to_glib_none().0))
        }
    }

    pub fn add_nomatch_sysfs_attr(&self, name: &str, value: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_nomatch_sysfs_attr(self.to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0))
        }
    }

    pub fn add_sysfs_path(&self, sysfs_path: &str) -> Option<Enumerator> {
        unsafe {
            from_glib_none(ffi::g_udev_enumerator_add_sysfs_path(self.to_glib_none().0, sysfs_path.to_glib_none().0))
        }
    }

    pub fn execute(&self) -> Vec<Device> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::g_udev_enumerator_execute(self.to_glib_none().0))
        }
    }
}
