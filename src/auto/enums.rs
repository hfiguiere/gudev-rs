// This file was generated by gir (9bd51ed) from gir-files (25c8aaf)
// DO NOT EDIT

use ffi;
use glib::Type;
use glib::StaticType;
use glib::value::{Value, SetValue, FromValue, FromValueOptional};
use gobject_ffi;
use glib::translate::*;
use std;

#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
pub enum DeviceType {
    None,
    Block,
    Char,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl ToGlib for DeviceType {
    type GlibType = ffi::GUdevDeviceType;

    fn to_glib(&self) -> ffi::GUdevDeviceType {
        match *self {
            DeviceType::None => ffi::G_UDEV_DEVICE_TYPE_NONE,
            DeviceType::Block => ffi::G_UDEV_DEVICE_TYPE_BLOCK,
            DeviceType::Char => ffi::G_UDEV_DEVICE_TYPE_CHAR,
            DeviceType::__Unknown(value) => unsafe{std::mem::transmute(value)}
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GUdevDeviceType> for DeviceType {
    fn from_glib(value: ffi::GUdevDeviceType) -> Self {
        match value as i32 {
            0 => DeviceType::None,
            98 => DeviceType::Block,
            99 => DeviceType::Char,
            value => DeviceType::__Unknown(value),
        }
    }
}

impl StaticType for DeviceType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::g_udev_device_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for DeviceType {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for DeviceType {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(std::mem::transmute::<i32, ffi::GUdevDeviceType>(gobject_ffi::g_value_get_enum(value.to_glib_none().0)))
    }
}

impl SetValue for DeviceType {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib() as i32)
    }
}

