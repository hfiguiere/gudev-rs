// This file was generated by gir (dc86d20) from gir-files (25c8aaf)
// DO NOT EDIT

use Device;
use DeviceNumber;
use DeviceType;
use ffi;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct Client(Object<ffi::GUdevClient>);

    match fn {
        get_type => || ffi::g_udev_client_get_type(),
    }
}

impl Client {
    pub fn new(subsystems: &[&str]) -> Client {
        unsafe {
            from_glib_full(ffi::g_udev_client_new(subsystems.to_glib_none().0))
        }
    }

    pub fn query_by_device_file(&self, device_file: &str) -> Option<Device> {
        unsafe {
            from_glib_full(ffi::g_udev_client_query_by_device_file(self.to_glib_none().0, device_file.to_glib_none().0))
        }
    }

    pub fn query_by_device_number(&self, type_: DeviceType, number: DeviceNumber) -> Option<Device> {
        unsafe {
            from_glib_full(ffi::g_udev_client_query_by_device_number(self.to_glib_none().0, type_.to_glib(), number))
        }
    }

    pub fn query_by_subsystem(&self, subsystem: Option<&str>) -> Vec<Device> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::g_udev_client_query_by_subsystem(self.to_glib_none().0, subsystem.to_glib_none().0))
        }
    }

    pub fn query_by_subsystem_and_name(&self, subsystem: &str, name: &str) -> Option<Device> {
        unsafe {
            from_glib_full(ffi::g_udev_client_query_by_subsystem_and_name(self.to_glib_none().0, subsystem.to_glib_none().0, name.to_glib_none().0))
        }
    }

    pub fn query_by_sysfs_path(&self, sysfs_path: &str) -> Option<Device> {
        unsafe {
            from_glib_full(ffi::g_udev_client_query_by_sysfs_path(self.to_glib_none().0, sysfs_path.to_glib_none().0))
        }
    }

    pub fn connect_uevent<F: Fn(&Client, &str, &Device) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Client, &str, &Device) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "uevent",
                transmute(uevent_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn uevent_trampoline(this: *mut ffi::GUdevClient, action: *mut libc::c_char, device: *mut ffi::GUdevDevice, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&Client, &str, &Device) + 'static> = transmute(f);
    f(&from_glib_none(this), &String::from_glib_none(action), &from_glib_none(device))
}
