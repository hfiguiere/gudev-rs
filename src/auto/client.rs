// This file was generated by gir (dc86d20) from gir-files (25c8aaf)
// DO NOT EDIT

use ffi;
use glib::translate::*;

glib_wrapper! {
    pub struct Client(Object<ffi::GUdevClient>);

    match fn {
        get_type => || ffi::g_udev_client_get_type(),
    }
}

impl Client {
    pub fn new(subsystems: &[&str]) -> Client {
        unsafe {
            from_glib_full(ffi::g_udev_client_new(subsystems.to_glib_none().0))
        }
    }

    //pub fn query_by_device_file(&self, device_file: &str) -> /*Ignored*/Option<Device> {
    //    unsafe { TODO: call ffi::g_udev_client_query_by_device_file() }
    //}

    //pub fn query_by_device_number(&self, type_: /*Ignored*/DeviceType, number: DeviceNumber) -> /*Ignored*/Option<Device> {
    //    unsafe { TODO: call ffi::g_udev_client_query_by_device_number() }
    //}

    //pub fn query_by_subsystem(&self, subsystem: Option<&str>) -> /*Ignored*/Vec<Device> {
    //    unsafe { TODO: call ffi::g_udev_client_query_by_subsystem() }
    //}

    //pub fn query_by_subsystem_and_name(&self, subsystem: &str, name: &str) -> /*Ignored*/Option<Device> {
    //    unsafe { TODO: call ffi::g_udev_client_query_by_subsystem_and_name() }
    //}

    //pub fn query_by_sysfs_path(&self, sysfs_path: &str) -> /*Ignored*/Option<Device> {
    //    unsafe { TODO: call ffi::g_udev_client_query_by_sysfs_path() }
    //}

    //pub fn connect_uevent<Unsupported or ignored types>(&self, f: F) -> u64 {
    //    Ignored device: GUdev.Device
    //}
}
