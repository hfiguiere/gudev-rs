// This file was generated by gir (https://github.com/gtk-rs/gir @ 2723216)
// from gir-files (https://github.com/gtk-rs/gir-files @ 25c8aaf)
// DO NOT EDIT

use DeviceNumber;
use DeviceType;
use ffi;
use glib::GString;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct Device(Object<ffi::GUdevDevice, ffi::GUdevDeviceClass, DeviceClass>);

    match fn {
        get_type => || ffi::g_udev_device_get_type(),
    }
}

pub const NONE_DEVICE: Option<&Device> = None;

pub trait DeviceExt: 'static {
    fn get_action(&self) -> Option<GString>;

    fn get_device_file(&self) -> Option<GString>;

    fn get_device_file_symlinks(&self) -> Vec<GString>;

    fn get_device_number(&self) -> DeviceNumber;

    fn get_device_type(&self) -> DeviceType;

    fn get_devtype(&self) -> Option<GString>;

    fn get_driver(&self) -> Option<GString>;

    fn get_is_initialized(&self) -> bool;

    fn get_name(&self) -> Option<GString>;

    fn get_number(&self) -> Option<GString>;

    fn get_parent(&self) -> Option<Device>;

    fn get_parent_with_subsystem<'a, P: Into<Option<&'a str>>>(&self, subsystem: &str, devtype: P) -> Option<Device>;

    fn get_property(&self, key: &str) -> Option<GString>;

    fn get_property_as_boolean(&self, key: &str) -> bool;

    fn get_property_as_double(&self, key: &str) -> f64;

    fn get_property_as_int(&self, key: &str) -> i32;

    fn get_property_as_strv(&self, key: &str) -> Vec<GString>;

    fn get_property_as_uint64(&self, key: &str) -> u64;

    fn get_property_keys(&self) -> Vec<GString>;

    fn get_seqnum(&self) -> u64;

    fn get_subsystem(&self) -> Option<GString>;

    fn get_sysfs_attr(&self, name: &str) -> Option<GString>;

    fn get_sysfs_attr_as_boolean(&self, name: &str) -> bool;

    fn get_sysfs_attr_as_double(&self, name: &str) -> f64;

    fn get_sysfs_attr_as_int(&self, name: &str) -> i32;

    fn get_sysfs_attr_as_strv(&self, name: &str) -> Vec<GString>;

    fn get_sysfs_attr_as_uint64(&self, name: &str) -> u64;

    fn get_sysfs_attr_keys(&self) -> Vec<GString>;

    fn get_sysfs_path(&self) -> Option<GString>;

    fn get_tags(&self) -> Vec<GString>;

    fn get_usec_since_initialized(&self) -> u64;

    fn has_property(&self, key: &str) -> bool;

    fn has_sysfs_attr(&self, key: &str) -> bool;
}

impl<O: IsA<Device>> DeviceExt for O {
    fn get_action(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_udev_device_get_action(self.as_ref().to_glib_none().0))
        }
    }

    fn get_device_file(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_udev_device_get_device_file(self.as_ref().to_glib_none().0))
        }
    }

    fn get_device_file_symlinks(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::g_udev_device_get_device_file_symlinks(self.as_ref().to_glib_none().0))
        }
    }

    fn get_device_number(&self) -> DeviceNumber {
        unsafe {
            ffi::g_udev_device_get_device_number(self.as_ref().to_glib_none().0)
        }
    }

    fn get_device_type(&self) -> DeviceType {
        unsafe {
            from_glib(ffi::g_udev_device_get_device_type(self.as_ref().to_glib_none().0))
        }
    }

    fn get_devtype(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_udev_device_get_devtype(self.as_ref().to_glib_none().0))
        }
    }

    fn get_driver(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_udev_device_get_driver(self.as_ref().to_glib_none().0))
        }
    }

    fn get_is_initialized(&self) -> bool {
        unsafe {
            from_glib(ffi::g_udev_device_get_is_initialized(self.as_ref().to_glib_none().0))
        }
    }

    fn get_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_udev_device_get_name(self.as_ref().to_glib_none().0))
        }
    }

    fn get_number(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_udev_device_get_number(self.as_ref().to_glib_none().0))
        }
    }

    fn get_parent(&self) -> Option<Device> {
        unsafe {
            from_glib_full(ffi::g_udev_device_get_parent(self.as_ref().to_glib_none().0))
        }
    }

    fn get_parent_with_subsystem<'a, P: Into<Option<&'a str>>>(&self, subsystem: &str, devtype: P) -> Option<Device> {
        let devtype = devtype.into();
        unsafe {
            from_glib_full(ffi::g_udev_device_get_parent_with_subsystem(self.as_ref().to_glib_none().0, subsystem.to_glib_none().0, devtype.to_glib_none().0))
        }
    }

    fn get_property(&self, key: &str) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_udev_device_get_property(self.as_ref().to_glib_none().0, key.to_glib_none().0))
        }
    }

    fn get_property_as_boolean(&self, key: &str) -> bool {
        unsafe {
            from_glib(ffi::g_udev_device_get_property_as_boolean(self.as_ref().to_glib_none().0, key.to_glib_none().0))
        }
    }

    fn get_property_as_double(&self, key: &str) -> f64 {
        unsafe {
            ffi::g_udev_device_get_property_as_double(self.as_ref().to_glib_none().0, key.to_glib_none().0)
        }
    }

    fn get_property_as_int(&self, key: &str) -> i32 {
        unsafe {
            ffi::g_udev_device_get_property_as_int(self.as_ref().to_glib_none().0, key.to_glib_none().0)
        }
    }

    fn get_property_as_strv(&self, key: &str) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::g_udev_device_get_property_as_strv(self.as_ref().to_glib_none().0, key.to_glib_none().0))
        }
    }

    fn get_property_as_uint64(&self, key: &str) -> u64 {
        unsafe {
            ffi::g_udev_device_get_property_as_uint64(self.as_ref().to_glib_none().0, key.to_glib_none().0)
        }
    }

    fn get_property_keys(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::g_udev_device_get_property_keys(self.as_ref().to_glib_none().0))
        }
    }

    fn get_seqnum(&self) -> u64 {
        unsafe {
            ffi::g_udev_device_get_seqnum(self.as_ref().to_glib_none().0)
        }
    }

    fn get_subsystem(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_udev_device_get_subsystem(self.as_ref().to_glib_none().0))
        }
    }

    fn get_sysfs_attr(&self, name: &str) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_udev_device_get_sysfs_attr(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn get_sysfs_attr_as_boolean(&self, name: &str) -> bool {
        unsafe {
            from_glib(ffi::g_udev_device_get_sysfs_attr_as_boolean(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn get_sysfs_attr_as_double(&self, name: &str) -> f64 {
        unsafe {
            ffi::g_udev_device_get_sysfs_attr_as_double(self.as_ref().to_glib_none().0, name.to_glib_none().0)
        }
    }

    fn get_sysfs_attr_as_int(&self, name: &str) -> i32 {
        unsafe {
            ffi::g_udev_device_get_sysfs_attr_as_int(self.as_ref().to_glib_none().0, name.to_glib_none().0)
        }
    }

    fn get_sysfs_attr_as_strv(&self, name: &str) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::g_udev_device_get_sysfs_attr_as_strv(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn get_sysfs_attr_as_uint64(&self, name: &str) -> u64 {
        unsafe {
            ffi::g_udev_device_get_sysfs_attr_as_uint64(self.as_ref().to_glib_none().0, name.to_glib_none().0)
        }
    }

    fn get_sysfs_attr_keys(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::g_udev_device_get_sysfs_attr_keys(self.as_ref().to_glib_none().0))
        }
    }

    fn get_sysfs_path(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_udev_device_get_sysfs_path(self.as_ref().to_glib_none().0))
        }
    }

    fn get_tags(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::g_udev_device_get_tags(self.as_ref().to_glib_none().0))
        }
    }

    fn get_usec_since_initialized(&self) -> u64 {
        unsafe {
            ffi::g_udev_device_get_usec_since_initialized(self.as_ref().to_glib_none().0)
        }
    }

    fn has_property(&self, key: &str) -> bool {
        unsafe {
            from_glib(ffi::g_udev_device_has_property(self.as_ref().to_glib_none().0, key.to_glib_none().0))
        }
    }

    fn has_sysfs_attr(&self, key: &str) -> bool {
        unsafe {
            from_glib(ffi::g_udev_device_has_sysfs_attr(self.as_ref().to_glib_none().0, key.to_glib_none().0))
        }
    }
}

impl fmt::Display for Device {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Device")
    }
}
